// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SistemaCitasMedicas.Infrastructure.Data;

#nullable disable

namespace SistemaCitasMedicas.Infrastructure.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("SistemaCitasMedicas.Domain.Entities.Cita", b =>
                {
                    b.Property<int>("IdCita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idcita");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdCita"));

                    b.Property<int>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fechahora");

                    b.Property<int>("IdDoctor")
                        .HasColumnType("int")
                        .HasColumnName("id_doctor");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int")
                        .HasColumnName("idpaciente");

                    b.Property<long>("IdUsuario")
                        .HasColumnType("bigint")
                        .HasColumnName("idusuario");

                    b.HasKey("IdCita");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdPaciente");

                    b.HasIndex("IdUsuario");

                    b.ToTable("t_cita", (string)null);
                });

            modelBuilder.Entity("SistemaCitasMedicas.Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("IdDoctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_doctor");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdDoctor"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("apellido");

                    b.Property<string>("CedulaProfesional")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("cedulaprofesional");

                    b.Property<int>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<DateTime>("Horario")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("horario");

                    b.Property<long>("IdUsuario")
                        .HasColumnType("bigint")
                        .HasColumnName("idusuario");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("telefono");

                    b.HasKey("IdDoctor");

                    b.HasIndex("IdUsuario")
                        .IsUnique();

                    b.ToTable("t_doctor", (string)null);
                });

            modelBuilder.Entity("SistemaCitasMedicas.Domain.Entities.DoctorEspecializacion", b =>
                {
                    b.Property<int>("IdDoctorEspecialidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idoctorespecializacion");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdDoctorEspecialidad"));

                    b.Property<int>("IdDoctor")
                        .HasColumnType("int")
                        .HasColumnName("id_doctor");

                    b.Property<int>("IdEspecializacion")
                        .HasColumnType("int")
                        .HasColumnName("idespecializacion");

                    b.HasKey("IdDoctorEspecialidad");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdEspecializacion");

                    b.ToTable("t_doctor_especializacion", (string)null);
                });

            modelBuilder.Entity("SistemaCitasMedicas.Domain.Entities.Especializacion", b =>
                {
                    b.Property<int>("IdEspecializacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idespecializacion");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdEspecializacion"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("descripcion");

                    b.Property<int>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("varchar(75)")
                        .HasColumnName("nombre");

                    b.HasKey("IdEspecializacion");

                    b.ToTable("t_especializacion", (string)null);
                });

            modelBuilder.Entity("SistemaCitasMedicas.Domain.Entities.HistorialMedico", b =>
                {
                    b.Property<int>("IdHistorialMedico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idhistorialmedico");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdHistorialMedico"));

                    b.Property<string>("CuadroMedico")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("cuadro_medico");

                    b.Property<string>("Diagnostico")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("diagnostico");

                    b.Property<int>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fechahora");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int")
                        .HasColumnName("idpaciente");

                    b.Property<string>("Notas")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("notas");

                    b.Property<string>("Tratamientos")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tratamientos");

                    b.HasKey("IdHistorialMedico");

                    b.HasIndex("IdPaciente")
                        .IsUnique();

                    b.ToTable("t_historial_medico", (string)null);
                });

            modelBuilder.Entity("SistemaCitasMedicas.Domain.Entities.Paciente", b =>
                {
                    b.Property<int>("IdPaciente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idpaciente");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdPaciente"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("apellido");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("direccion");

                    b.Property<int>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fechanacimiento");

                    b.Property<long>("IdUsuario")
                        .HasColumnType("bigint")
                        .HasColumnName("idusuario");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre");

                    b.Property<string>("Seguro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("seguro");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("telefono");

                    b.HasKey("IdPaciente");

                    b.HasIndex("IdUsuario")
                        .IsUnique();

                    b.ToTable("t_paciente", (string)null);
                });

            modelBuilder.Entity("SistemaCitasMedicas.Domain.Entities.Rol", b =>
                {
                    b.Property<int>("IdRol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idrol");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdRol"));

                    b.Property<int>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("varchar(75)")
                        .HasColumnName("nombre");

                    b.HasKey("IdRol");

                    b.ToTable("t_rol", (string)null);
                });

            modelBuilder.Entity("SistemaCitasMedicas.Domain.Entities.Usuario", b =>
                {
                    b.Property<long>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("idusuario");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("IdUsuario"));

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("correo");

                    b.Property<int>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<int>("IdRol")
                        .HasColumnType("int")
                        .HasColumnName("idrol");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.HasKey("IdUsuario");

                    b.HasIndex("IdRol");

                    b.ToTable("t_usuario", (string)null);
                });

            modelBuilder.Entity("SistemaCitasMedicas.Domain.Entities.Cita", b =>
                {
                    b.HasOne("SistemaCitasMedicas.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Citas")
                        .HasForeignKey("IdDoctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaCitasMedicas.Domain.Entities.Paciente", "Paciente")
                        .WithMany("Citas")
                        .HasForeignKey("IdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaCitasMedicas.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Citas")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Paciente");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SistemaCitasMedicas.Domain.Entities.Doctor", b =>
                {
                    b.HasOne("SistemaCitasMedicas.Domain.Entities.Usuario", "Usuario")
                        .WithOne("Doctor")
                        .HasForeignKey("SistemaCitasMedicas.Domain.Entities.Doctor", "IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SistemaCitasMedicas.Domain.Entities.DoctorEspecializacion", b =>
                {
                    b.HasOne("SistemaCitasMedicas.Domain.Entities.Doctor", "Doctor")
                        .WithMany("DoctorEspecializaciones")
                        .HasForeignKey("IdDoctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaCitasMedicas.Domain.Entities.Especializacion", "Especializacion")
                        .WithMany("DoctorEspecializaciones")
                        .HasForeignKey("IdEspecializacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Especializacion");
                });

            modelBuilder.Entity("SistemaCitasMedicas.Domain.Entities.HistorialMedico", b =>
                {
                    b.HasOne("SistemaCitasMedicas.Domain.Entities.Paciente", "Paciente")
                        .WithOne("HistorialMedico")
                        .HasForeignKey("SistemaCitasMedicas.Domain.Entities.HistorialMedico", "IdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("SistemaCitasMedicas.Domain.Entities.Paciente", b =>
                {
                    b.HasOne("SistemaCitasMedicas.Domain.Entities.Usuario", "Usuario")
                        .WithOne("Paciente")
                        .HasForeignKey("SistemaCitasMedicas.Domain.Entities.Paciente", "IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SistemaCitasMedicas.Domain.Entities.Usuario", b =>
                {
                    b.HasOne("SistemaCitasMedicas.Domain.Entities.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("SistemaCitasMedicas.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("DoctorEspecializaciones");
                });

            modelBuilder.Entity("SistemaCitasMedicas.Domain.Entities.Especializacion", b =>
                {
                    b.Navigation("DoctorEspecializaciones");
                });

            modelBuilder.Entity("SistemaCitasMedicas.Domain.Entities.Paciente", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("HistorialMedico");
                });

            modelBuilder.Entity("SistemaCitasMedicas.Domain.Entities.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("SistemaCitasMedicas.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("Doctor");

                    b.Navigation("Paciente");
                });
#pragma warning restore 612, 618
        }
    }
}
